#ifndef RUNBYRUNLUMIHANDLER_H
#define RUNBYRUNLUMIHANDLER_H

#include <map>
#include <iostream>

double getLumiFromRunNumber(int runNum)
{
  //Via Y. Go, 2023.01.17, prompte by Sebastian comment on run stability over many cuts
  std::map<int, double> map_runLumi_pp = {
    {340644, 3.12118},
    {340683, 2.4285},
    {340697, 21.2392},
    {340718, 53.3431},
    {340814, 33.6938},
    {340849, 0.85069},
    {340850, 15.2313},
    {340910, 17.0445},
    {340925, 6.61454},
    {340973, 14.0040},
    {341027, 40.1909},
    {341123, 21.5082},
    {341184, 27.5218}
  };

  //Pb+Pb map also via Y. Go, 2023.01.17, prompte by Sebastian comment on run stability over many cuts
  std::map<int, double> map_runLumi_pbpb = {
    {365502, 0.984068},
    {365512, 0.909900},
    {365573, 7.775283},
    {365602, 9.799887},
    {365627, 24.94723},
    {365678, 16.30580},
    {365681, 24.74793},
    {365709, 35.41777},
    {365752, 36.82140},
    {365834, 5.596860},
    {365914, 6.518190},
    {365932, 41.77292},
    {366011, 43.92340},
    {366029, 42.85270},
    {366092, 45.45390},
    {366142, 41.90416},
    {366268, 54.33575},
    {366337, 44.17622},
    {366383, 0.156062},
    {366413, 40.82990},
    {366476, 42.26405},
    {366526, 1.039330},
    {366528, 33.21920},
    {366627, 36.81921},
    {366691, 55.47480},
    {366754, 61.86866},
    {366805, 73.14960},
    {366860, 65.38011},
    {366878, 64.34050},
    {366919, 73.95471},
    {366931, 58.06430},
    {366994, 9.597630},
    {367023, 64.87817},
    {367099, 66.27240},
    {367134, 72.66577},
    {367165, 8.728460},
    {367170, 47.71145},
    {367233, 54.99869},
    {367273, 52.71071},
    {367318, 64.04217},
    {367321, 65.51270},
    {367363, 13.13170},
    {367364, 66.46606},
    {367365, 40.38040},
    {367384, 7.626148}
  };

  if(map_runLumi_pp.count(runNum) != 0) return map_runLumi_pp[runNum];
  else if(map_runLumi_pbpb.count(runNum) != 0) return map_runLumi_pbpb[runNum];
  else{
    std::cout << "RUNBYRUNLUMIHANDLER Error: runNumber=" << runNum << " requested not found, return lumi 0.0" << std::endl;
    return 0.0;
  }
}

#endif
